#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Mir:server');
var http = require('http');
var request = require("request")
var io = require('socket.io');
var cron = require('cron');
var exec = require('child_process').exec;
var usonic = require('r-pi-usonic');
var Gpio = require('onoff').Gpio,
        redLed = new Gpio(17, 'out');
greenLed = new Gpio(27, 'out');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log('Port: ' + port);

var io = io.listen(server.listen(port));




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
    debug('Listening on ' + bind);
}



io.on('connection', function (socket) {
    var socketId = socket.id;
    var clientIp = socket.request.connection.remoteAddress;
    console.log('New connection ' + socketId + ' - ' + clientIp);
    getForecast();
});


var getForecast = function () {
    var url = "http://api.openweathermap.org/data/2.5/forecast?q=Wroclaw&units=metric&appid=8f0015ac1ba52eb00af4175316f84bb7";

    request({
        url: url,
        json: true
    }, function (error, response, body) {
        blinkGreen(1000);
        if (!error && response.statusCode === 200) {
            io.emit('weather', body);
            console.log('weather');
        }
    });
};

var weatherCron = cron.job("* */30 * * * *", function () {
    getForecast();
});

var getTemperature = function (tempId) {

    exec("cat /sys/bus/w1/devices/" + tempId + "/w1_slave | grep t= | cut -f2 -d= | awk '{print $1/1000}'", function (error, stdout, stderr) {
        if (error != null) {
            console.log("Error: " + error);
        }
        blinkRed(200);
        var temp = parseFloat(stdout).toFixed(2);
        io.emit('rpi_temperature', temp);
    });
};

var tempCron = cron.job("*/30 * * * * *", function () {
    getTemperature('28-0216009499ff');
});

var distCron = cron.job("*/2 * * * * *", function () {
    checkDist();
});

var sonicSensorInit = false;
usonic.init(function (error) {
    if (error)
    {
        console.log(error);
    }
    else
    {
        sonicSensorInit = true;
    }
});

function checkDist()
{
    if(sonicSensorInit)
    {
        var sensor = usonic.createSensor(24, 23, 1200);
        var dist = sensor();
        if(dist < 30)
        {
            blinkGreen(50);
        }
    }
}

setInterval(checkDist, 200);

function blinkRed(duration)
{
    redLed.writeSync(1);
    setTimeout(function () {
        redLed.writeSync(0);  // Turn LED off.
        //led.unexport();    // Unexport GPIO and free resources
    }, duration);
}

function blinkGreen(duration)
{
    greenLed.writeSync(1);
    setTimeout(function () {
        greenLed.writeSync(0);  // Turn LED off.
        //led.unexport();    // Unexport GPIO and free resources
    }, duration);
}
getForecast();
checkDist();
getTemperature('28-0216009499ff');

weatherCron.start();
tempCron.start();
distCron.start();
